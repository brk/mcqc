// Autogenerated by MCQC
#pragma once
#include "bool.hpp"
#include "nat.hpp"
#include "proc.hpp"
#include "show.hpp"
#include "string.hpp"
#include "variant.hpp"

using namespace Bool;
using namespace Nat;
using namespace Proc;
using namespace Show;
using namespace String;
using namespace Variant;

template<class T>
struct Coq_nil {};
template<class T>
struct Coq_cons {
  T a;
  std::shared_ptr<std::variant<Coq_nil<T>, Coq_cons<T>>> b;
  Coq_cons(T a, std::shared_ptr<std::variant<Coq_nil<T>, Coq_cons<T>>> b) {
    this->a = a;
    this->b = b;
  };
};


template<class T>
using list = std::variant<Coq_nil<T>, Coq_cons<T>>;

template<class T>
std::shared_ptr<list<T>> coq_nil() {
  return std::make_shared<list<T>>(Coq_nil<T>());
}

template<class T>
std::shared_ptr<list<T>> coq_cons(T a, std::shared_ptr<list<T>> b) {
  return std::make_shared<list<T>>(Coq_cons<T>(a, b));
}


template<class T, class U, class V>
auto match(std::shared_ptr<list<T>> self, U f, V g) {
  return gmatch(self, [=](Coq_nil<T> _) { return f(); }, [=](Coq_cons<T> _) { return g(_.a, _.b); });
}

template<class T>
nat length(std::shared_ptr<list<T>> l) {
  return match(l,
    [=]() { return (nat)0; },
    [=](auto _, auto lM) { return succ(length(lM)); });
}


bool isEven(nat n) {
  return match(n,
    [=]() { return true; },
    [=](auto sm) { return match(sm,
      [=]() { return false; },
      [=](auto m) { return isEven(m); }); });
}

template<class T>
std::shared_ptr<list<nat>> mapOnEvensM(T f, nat n, std::shared_ptr<list<nat>> l) {
  return match(l,
    [=]() { return coq_nil<nat>(); },
    [=](auto h, auto ts) { return match(isEven(n),
      [=]() { return coq_cons<nat>(f(h), mapOnEvensM(f, sub(n, (nat)1), ts)); },
      [=]() { return coq_cons<nat>(h, mapOnEvensM(f, sub(n, (nat)1), ts)); }); });
}

template<class T>
std::shared_ptr<list<nat>> mapOnEvens(T f, std::shared_ptr<list<nat>> l) {
  auto len = length(l);
  return match(len,
    [=]() { return coq_nil<nat>(); },
    [=](auto n) { return mapOnEvensM<T>(f, n, l); });
}

int main() {
  print(show(mapOnEvens([=](auto x) { return add(x, x); }, coq_cons<nat>((nat)1, coq_cons<nat>((nat)2, coq_cons<nat>((nat)3, coq_cons<nat>((nat)4, coq_cons<nat>((nat)5, coq_cons<nat>((nat)6, coq_nil<nat>())))))))));
  return 0;
}


