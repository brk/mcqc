{-# LANGUAGE DeriveAnyClass, DeriveGeneric, DuplicateRecordFields, OverloadedStrings  #-}
module Codegen.File where
import GHC.Generics
import Parser.Mod
import Data.Aeson
import Codegen.Func
import Codegen.Decl
import Clang.FuncSig
import Data.Text (Text, append)
import Data.Text.Prettyprint.Doc

data CFile = CFile { includes :: [Text], filename :: Text, funcs :: [CFunc] }
    deriving (Eq, Generic, ToJSON)

instance Pretty CFile where
  pretty f = "// Autogenerated by MachCoq"
           <> line
           <> vcat (map pretty (includes f)) -- #include <stdio.h>
           <> line
           <> line
           <> vcat (map pretty (funcs f))
           <> line

compile :: Module -> CFile
compile Module { name = n, used_modules = Nothing, declarations = decls } = CFile [] (append ".cpp" n) cfuncs
    where cfuncs = map toCDecl decls
compile Module { name = n, used_modules = Just ml, declarations = decls } = CFile [] (append ".cpp" n) cfuncs -- TODO: implement linking with other coq files
    where cfuncs = map toCDecl decls


