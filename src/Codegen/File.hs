{-# LANGUAGE DuplicateRecordFields, OverloadedStrings  #-}
module Codegen.File where
import Parser.Mod
import Codegen.Func
import Codegen.Decl
import Data.Text (Text, append)
import Data.Text.Prettyprint.Doc

data CFile = CFile { includes :: [Text], filename :: Text, funcs :: [CFunc] }
    deriving (Eq)

instance Pretty CFile where
  pretty f = "// Autogenerated by MachCoq"
           <> line
           <> vcat (map pretty (includes f)) -- #include <stdio.h>
           <> line
           <> line
           <> vcat (map pretty (funcs f))
           <> line

std_imports = [ "#include <iostream>",
                "#include <mach7/type_switchN-patterns.hpp> // Support for N-ary Match statement on patterns",
                "#include <mach7/patterns/address.hpp>      // Address and dereference combinators",
                "#include <mach7/patterns/bindings.hpp>     // Mach7 support for bindings on arbitrary UDT",
                "#include <mach7/patterns/constructor.hpp>  // Support for constructor patterns",
                "#include <mach7/patterns/primitive.hpp>    // Wildcard, variable and value patterns",
                "#include <xtl/adapters/std/memory.hpp>     // XTL subtyping adapters for standard smart pointers" ]

toCFile :: Module -> CFile
toCFile Module { name = n, used_modules = Nothing, declarations = decls } = CFile (["#include<iostream>"] ++ std_imports) (append ".cpp" n) cfuncs
    where cfuncs = map toCDecl decls
toCFile Module { name = n, used_modules = Just ml, declarations = decls } = CFile std_imports (append ".cpp" n) cfuncs -- TODO: implement linking
    where cfuncs = map toCDecl decls

