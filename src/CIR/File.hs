{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE RecordWildCards #-}
module CIR.File where
import GHC.Generics
import CIR.Decl
import Data.Aeson
import Control.Lens
import Data.Text (Text)
import Data.Text.Prettyprint.Doc
import qualified Data.Text as T

data CFile = CFile { _includes :: [Text], _decls :: [CDecl] }
    deriving (Eq, Generic, ToJSON)

instance Pretty CFile where
  pretty CFile { .. } =
           "// Autogenerated by MachCoq"
           <> line <> (vcat . map (\p -> "#include \"" <> pretty p <> ".hpp\"") $ _includes)
           <> line
           <> line <> (vcat . map (\p -> "using namespace" <+> pretty (T.toTitle p) <> ";") $ _includes)
           <> line
           <> line <> (vsep . map pretty $ _decls)

makeLenses ''CFile
